{
    "openapi": "3.0.3",
    "info": {
        "title": "iGoUltra API",
        "version": "1.0.0",
        "description": "Interaktive API-Dokumentation (nur lokal)"
    },
    "paths": {
        "/api/schema/": {
            "get": {
                "operationId": "api_schema_retrieve",
                "description": "OpenApi3 schema for this API. Format can be selected via content negotiation.\n\n- YAML: application/vnd.oai.openapi\n- JSON: application/vnd.oai.openapi+json",
                "parameters": [
                    {
                        "in": "query",
                        "name": "format",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "yaml"
                            ]
                        }
                    },
                    {
                        "in": "query",
                        "name": "lang",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "af",
                                "ar",
                                "ar-dz",
                                "ast",
                                "az",
                                "be",
                                "bg",
                                "bn",
                                "br",
                                "bs",
                                "ca",
                                "ckb",
                                "cs",
                                "cy",
                                "da",
                                "de",
                                "dsb",
                                "el",
                                "en",
                                "en-au",
                                "en-gb",
                                "eo",
                                "es",
                                "es-ar",
                                "es-co",
                                "es-mx",
                                "es-ni",
                                "es-ve",
                                "et",
                                "eu",
                                "fa",
                                "fi",
                                "fr",
                                "fy",
                                "ga",
                                "gd",
                                "gl",
                                "he",
                                "hi",
                                "hr",
                                "hsb",
                                "hu",
                                "hy",
                                "ia",
                                "id",
                                "ig",
                                "io",
                                "is",
                                "it",
                                "ja",
                                "ka",
                                "kab",
                                "kk",
                                "km",
                                "kn",
                                "ko",
                                "ky",
                                "lb",
                                "lt",
                                "lv",
                                "mk",
                                "ml",
                                "mn",
                                "mr",
                                "ms",
                                "my",
                                "nb",
                                "ne",
                                "nl",
                                "nn",
                                "os",
                                "pa",
                                "pl",
                                "pt",
                                "pt-br",
                                "ro",
                                "ru",
                                "sk",
                                "sl",
                                "sq",
                                "sr",
                                "sr-latn",
                                "sv",
                                "sw",
                                "ta",
                                "te",
                                "tg",
                                "th",
                                "tk",
                                "tr",
                                "tt",
                                "udm",
                                "ug",
                                "uk",
                                "ur",
                                "uz",
                                "vi",
                                "zh-hans",
                                "zh-hant"
                            ]
                        }
                    }
                ],
                "tags": [
                    "api"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/vnd.oai.openapi": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {}
                                }
                            },
                            "application/yaml": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {}
                                }
                            },
                            "application/vnd.oai.openapi+json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {}
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {}
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/auth/csrf/": {
            "get": {
                "operationId": "api_v1_auth_csrf_retrieve",
                "description": "Simple endpoint to set the CSRF cookie for the frontend.",
                "tags": [
                    "api"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/api/v1/auth/discord/callback/": {
            "post": {
                "operationId": "api_v1_auth_discord_callback_create",
                "tags": [
                    "api"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/api/v1/auth/jwt/create/": {
            "post": {
                "operationId": "api_v1_auth_jwt_create_create",
                "description": "Takes a set of user credentials and returns an access and refresh JSON web\ntoken pair to prove the authentication of those credentials.",
                "tags": [
                    "api"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TokenObtainPair"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/TokenObtainPair"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/TokenObtainPair"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TokenObtainPair"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/auth/jwt/refresh/": {
            "post": {
                "operationId": "api_v1_auth_jwt_refresh_create",
                "description": "Takes a refresh type JSON web token and returns an access type JSON web\ntoken if the refresh token is valid.",
                "tags": [
                    "api"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TokenRefresh"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/TokenRefresh"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/TokenRefresh"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TokenRefresh"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/auth/login/": {
            "post": {
                "operationId": "api_v1_auth_login_create",
                "description": "Check the credentials and return the REST Token\nif the credentials are valid and authenticated.\nCalls Django Auth login method to register User ID\nin Django session framework\n\nAccept the following POST parameters: username, password\nReturn the REST Framework Token Object's key.",
                "tags": [
                    "api"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Login"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/Login"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/Login"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/auth/logout/": {
            "post": {
                "operationId": "api_v1_auth_logout_create",
                "description": "Calls Django logout method and delete the Token object\nassigned to the current User object.\n\nAccepts/Returns nothing.",
                "tags": [
                    "api"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestAuthDetail"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/auth/me/": {
            "get": {
                "operationId": "api_v1_auth_me_retrieve",
                "description": "📥 Return user data (e.g. username, ultra_name, XP, etc.)",
                "tags": [
                    "api"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response body"
                    }
                }
            },
            "patch": {
                "operationId": "api_v1_auth_me_partial_update",
                "description": "✏️ Update specific user fields (e.g. ultra_name) via PATCH.",
                "tags": [
                    "api"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/api/v1/auth/password/change/": {
            "post": {
                "operationId": "api_v1_auth_password_change_create",
                "description": "Calls Django Auth SetPasswordForm save method.\n\nAccepts the following POST parameters: new_password1, new_password2\nReturns the success/fail message.",
                "tags": [
                    "api"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PasswordChange"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PasswordChange"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PasswordChange"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestAuthDetail"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/auth/password/reset/": {
            "post": {
                "operationId": "api_v1_auth_password_reset_create",
                "description": "Calls Django Auth PasswordResetForm save method.\n\nAccepts the following POST parameters: email\nReturns the success/fail message.",
                "tags": [
                    "api"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PasswordReset"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PasswordReset"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PasswordReset"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestAuthDetail"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/auth/password/reset/confirm/": {
            "post": {
                "operationId": "api_v1_auth_password_reset_confirm_create",
                "description": "Password reset e-mail link is confirmed, therefore\nthis resets the user's password.\n\nAccepts the following POST parameters: token, uid,\n    new_password1, new_password2\nReturns the success/fail message.",
                "tags": [
                    "api"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PasswordResetConfirm"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PasswordResetConfirm"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PasswordResetConfirm"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestAuthDetail"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/auth/registration/": {
            "post": {
                "operationId": "api_v1_auth_registration_create",
                "description": "Registers a new user.\n\nAccepts the following POST parameters: username, email, password1, password2.",
                "tags": [
                    "api"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Register"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/Register"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/Register"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {}
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/auth/registration/resend-email/": {
            "post": {
                "operationId": "api_v1_auth_registration_resend_email_create",
                "description": "Resends another email to an unverified email.\n\nAccepts the following POST parameter: email.",
                "tags": [
                    "api"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ResendEmailVerification"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/ResendEmailVerification"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/ResendEmailVerification"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {}
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestAuthDetail"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/auth/registration/verify-email/": {
            "post": {
                "operationId": "api_v1_auth_registration_verify_email_create",
                "description": "Verifies the email associated with the provided key.\n\nAccepts the following POST parameter: key.",
                "tags": [
                    "api"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VerifyEmail"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/VerifyEmail"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/VerifyEmail"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RestAuthDetail"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/auth/user/": {
            "get": {
                "operationId": "api_v1_auth_user_retrieve",
                "description": "Reads and updates UserModel fields\nAccepts GET, PUT, PATCH methods.\n\nDefault accepted fields: username, first_name, last_name\nDefault display fields: pk, username, email, first_name, last_name\nRead-only fields: pk, email\n\nReturns UserModel fields.",
                "tags": [
                    "api"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserDetails"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "put": {
                "operationId": "api_v1_auth_user_update",
                "description": "Reads and updates UserModel fields\nAccepts GET, PUT, PATCH methods.\n\nDefault accepted fields: username, first_name, last_name\nDefault display fields: pk, username, email, first_name, last_name\nRead-only fields: pk, email\n\nReturns UserModel fields.",
                "tags": [
                    "api"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserDetails"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/UserDetails"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/UserDetails"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserDetails"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "api_v1_auth_user_partial_update",
                "description": "Reads and updates UserModel fields\nAccepts GET, PUT, PATCH methods.\n\nDefault accepted fields: username, first_name, last_name\nDefault display fields: pk, username, email, first_name, last_name\nRead-only fields: pk, email\n\nReturns UserModel fields.",
                "tags": [
                    "api"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedUserDetails"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedUserDetails"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedUserDetails"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwtAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserDetails"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/rankings/leaderboard/": {
            "get": {
                "operationId": "api_v1_rankings_leaderboard_list",
                "description": "GET /api/v1/rankings/leaderboard/?\n    season=<id>\n    &real_layer=<BaseLayer>\n    [&cyber_layer=<SurfaceWebLayer>]\n    [&top=<n>]\n\nMindestens season + real_layer oder cyber_layer müssen gesetzt sein.",
                "tags": [
                    "api"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/LayerRankingEntry"
                                    }
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/seasons/active/": {
            "get": {
                "operationId": "api_v1_seasons_active_retrieve",
                "description": "GET /api/v1/seasons/active/ → aktuelle Season",
                "tags": [
                    "api"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Season"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/seasons/active/xp/": {
            "get": {
                "operationId": "api_v1_seasons_active_xp_retrieve",
                "description": "GET /api/v1/seasons/active/xp/ → XP-Summe des Users in der aktuellen Season",
                "tags": [
                    "api"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SeasonXp"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/xp/add/": {
            "post": {
                "operationId": "api_v1_xp_add_create",
                "description": "POST /api/v1/xp/add/ → XP für den aktuellen User vergeben\nAntwort enthält jetzt auch Level- und Next-Level-Infos.",
                "tags": [
                    "api"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddXp"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/AddXp"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/AddXp"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AddXp"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/xp/history/": {
            "get": {
                "operationId": "api_v1_xp_history_list",
                "description": "GET /api/v1/xp/history/ → Historie der XpEvents des aktuellen Users\nAntwort erweitert um das Level zum Zeitpunkt jedes Events.",
                "tags": [
                    "api"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/XpEvent"
                                    }
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/xp/types/": {
            "get": {
                "operationId": "api_v1_xp_types_list",
                "description": "GET /api/v1/xp/types/ → Liste aller konfigurierten XpTypes",
                "tags": [
                    "api"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/XpType"
                                    }
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/users/me/": {
            "get": {
                "operationId": "users_me_retrieve",
                "description": "📥 Return user data (e.g. username, ultra_name, XP, etc.)",
                "tags": [
                    "users"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response body"
                    }
                }
            },
            "patch": {
                "operationId": "users_me_partial_update",
                "description": "✏️ Update specific user fields (e.g. ultra_name) via PATCH.",
                "tags": [
                    "users"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response body"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "AddXp": {
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "XpType.key, z.B. \"pushups\""
                    },
                    "amount_units": {
                        "type": "number",
                        "format": "double",
                        "description": "Einheiten der Aktivität, z.B. 20 (Reps) oder 15 (Minuten)"
                    },
                    "metadata": {
                        "description": "Optional rohe Nutzereingabe o.ä."
                    }
                },
                "required": [
                    "amount_units",
                    "key"
                ]
            },
            "CyberLayerEnum": {
                "enum": [
                    "SurfaceWebLayer",
                    "DeepNetLayer",
                    "DarkCodeLayer",
                    "SyntheticLayer",
                    "VOIDLayer"
                ],
                "type": "string",
                "description": "* `SurfaceWebLayer` - SurfaceWebLayer\n* `DeepNetLayer` - DeepNetLayer\n* `DarkCodeLayer` - DarkCodeLayer\n* `SyntheticLayer` - SyntheticLayer\n* `VOIDLayer` - VOIDLayer"
            },
            "LayerRankingEntry": {
                "type": "object",
                "description": "Serializer für Leaderboard-Einträge:\nGibt user (StringRelatedField), xp, real_layer und cyber_layer aus.",
                "properties": {
                    "user": {
                        "type": "string",
                        "readOnly": true
                    },
                    "xp": {
                        "type": "integer",
                        "maximum": 2147483647,
                        "minimum": 0
                    },
                    "real_layer": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/RealLayerEnum"
                            }
                        ],
                        "description": "Snapshot Realitäts-Layer am Season-Ende\n\n* `BaseLayer` - BaseLayer\n* `EmotionLayer` - EmotionLayer\n* `FlowLayer` - FlowLayer\n* `CoreLayer` - CoreLayer\n* `UltraLayer` - UltraLayer"
                    },
                    "cyber_layer": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/CyberLayerEnum"
                            }
                        ],
                        "description": "Snapshot Cyber-Layer am Season-Ende\n\n* `SurfaceWebLayer` - SurfaceWebLayer\n* `DeepNetLayer` - DeepNetLayer\n* `DarkCodeLayer` - DarkCodeLayer\n* `SyntheticLayer` - SyntheticLayer\n* `VOIDLayer` - VOIDLayer"
                    }
                },
                "required": [
                    "user",
                    "xp"
                ]
            },
            "Login": {
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string",
                        "format": "email"
                    },
                    "password": {
                        "type": "string"
                    }
                },
                "required": [
                    "password"
                ]
            },
            "PasswordChange": {
                "type": "object",
                "properties": {
                    "new_password1": {
                        "type": "string",
                        "maxLength": 128
                    },
                    "new_password2": {
                        "type": "string",
                        "maxLength": 128
                    }
                },
                "required": [
                    "new_password1",
                    "new_password2"
                ]
            },
            "PasswordReset": {
                "type": "object",
                "description": "Serializer for requesting a password reset e-mail.",
                "properties": {
                    "email": {
                        "type": "string",
                        "format": "email"
                    }
                },
                "required": [
                    "email"
                ]
            },
            "PasswordResetConfirm": {
                "type": "object",
                "description": "Serializer for confirming a password reset attempt.",
                "properties": {
                    "new_password1": {
                        "type": "string",
                        "maxLength": 128
                    },
                    "new_password2": {
                        "type": "string",
                        "maxLength": 128
                    },
                    "uid": {
                        "type": "string"
                    },
                    "token": {
                        "type": "string"
                    }
                },
                "required": [
                    "new_password1",
                    "new_password2",
                    "token",
                    "uid"
                ]
            },
            "PatchedUserDetails": {
                "type": "object",
                "description": "User model w/o password",
                "properties": {
                    "pk": {
                        "type": "integer",
                        "readOnly": true,
                        "title": "ID"
                    },
                    "username": {
                        "type": "string",
                        "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        "pattern": "^[\\w.@+-]+$",
                        "maxLength": 150
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "readOnly": true,
                        "nullable": true,
                        "description": "Optional email address for contact or recovery"
                    },
                    "first_name": {
                        "type": "string",
                        "maxLength": 150
                    },
                    "last_name": {
                        "type": "string",
                        "maxLength": 150
                    }
                }
            },
            "RealLayerEnum": {
                "enum": [
                    "BaseLayer",
                    "EmotionLayer",
                    "FlowLayer",
                    "CoreLayer",
                    "UltraLayer"
                ],
                "type": "string",
                "description": "* `BaseLayer` - BaseLayer\n* `EmotionLayer` - EmotionLayer\n* `FlowLayer` - FlowLayer\n* `CoreLayer` - CoreLayer\n* `UltraLayer` - UltraLayer"
            },
            "Register": {
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string",
                        "maxLength": 150,
                        "minLength": 1
                    },
                    "email": {
                        "type": "string",
                        "format": "email"
                    },
                    "password1": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "password2": {
                        "type": "string",
                        "writeOnly": true
                    }
                },
                "required": [
                    "email",
                    "password1",
                    "password2"
                ]
            },
            "ResendEmailVerification": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "format": "email"
                    }
                },
                "required": [
                    "email"
                ]
            },
            "RestAuthDetail": {
                "type": "object",
                "properties": {
                    "detail": {
                        "type": "string",
                        "readOnly": true
                    }
                },
                "required": [
                    "detail"
                ]
            },
            "Season": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "start": {
                        "type": "string",
                        "format": "date"
                    },
                    "end": {
                        "type": "string",
                        "format": "date"
                    },
                    "is_active": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "end",
                    "id",
                    "name",
                    "start"
                ]
            },
            "SeasonXp": {
                "type": "object",
                "properties": {
                    "season": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Season"
                            }
                        ],
                        "readOnly": true
                    },
                    "xp": {
                        "type": "integer",
                        "maximum": 2147483647,
                        "minimum": 0
                    }
                },
                "required": [
                    "season"
                ]
            },
            "Token": {
                "type": "object",
                "description": "Serializer for Token model.",
                "properties": {
                    "key": {
                        "type": "string",
                        "maxLength": 40
                    }
                },
                "required": [
                    "key"
                ]
            },
            "TokenObtainPair": {
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "password": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "access": {
                        "type": "string",
                        "readOnly": true
                    },
                    "refresh": {
                        "type": "string",
                        "readOnly": true
                    }
                },
                "required": [
                    "access",
                    "password",
                    "refresh",
                    "username"
                ]
            },
            "TokenRefresh": {
                "type": "object",
                "properties": {
                    "access": {
                        "type": "string",
                        "readOnly": true
                    },
                    "refresh": {
                        "type": "string"
                    }
                },
                "required": [
                    "access",
                    "refresh"
                ]
            },
            "UserDetails": {
                "type": "object",
                "description": "User model w/o password",
                "properties": {
                    "pk": {
                        "type": "integer",
                        "readOnly": true,
                        "title": "ID"
                    },
                    "username": {
                        "type": "string",
                        "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        "pattern": "^[\\w.@+-]+$",
                        "maxLength": 150
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "readOnly": true,
                        "nullable": true,
                        "description": "Optional email address for contact or recovery"
                    },
                    "first_name": {
                        "type": "string",
                        "maxLength": 150
                    },
                    "last_name": {
                        "type": "string",
                        "maxLength": 150
                    }
                },
                "required": [
                    "email",
                    "pk",
                    "username"
                ]
            },
            "VerifyEmail": {
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string",
                        "writeOnly": true
                    }
                },
                "required": [
                    "key"
                ]
            },
            "XpEvent": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "amount": {
                        "type": "integer",
                        "maximum": 2147483647,
                        "minimum": -2147483648,
                        "description": "Positiv = Gain, Negativ = Abzug"
                    },
                    "source": {
                        "type": "string",
                        "description": "Identifier, z. B. \"pushups\", \"running\"",
                        "maxLength": 50
                    },
                    "metadata": {
                        "nullable": true,
                        "description": "z. B. {\"unit\":\"time_minute\",\"raw\":\"15 Minuten Yoga\"}"
                    },
                    "timestamp": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": [
                    "amount",
                    "id",
                    "source"
                ]
            },
            "XpType": {
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "display_name": {
                        "type": "string",
                        "maxLength": 200
                    },
                    "xp_amount": {
                        "type": "number",
                        "format": "double",
                        "description": "XP pro Einheit (z. B. 5 XP/Repetition oder 2 XP/Minute)"
                    },
                    "unit": {
                        "type": "string",
                        "description": "z. B. \"repetition\", \"time_minute\", \"step\"",
                        "maxLength": 50
                    },
                    "description": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "display_name",
                    "key",
                    "unit",
                    "xp_amount"
                ]
            }
        },
        "securitySchemes": {
            "jwtAuth": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT"
            }
        }
    }
}